@use "sass:map";
@use "sass:list";
@use 'variables' as v;

$themes: (

// for development to test new themes
  test: (
    col-1: v.$pale-pink,
    col-2: v.$light-pale-green,
    col-3: v.$red-pink,
    col-4: v.$bright-green,
    col-5: v.$pink,
    cell-background-color: v.$ghost-white,
    main-color: v.$light-pale-green, 
    card-border-style: 4px dashed v.$bright-pale-green,
    card-background-border-style: 4px dashed v.$bright-pale-green,
    font-family: Georgia,
    title-font-size: 3rem,
    content-font-size: v.$default-font-size,
    font-color: v.$dark-purple,
  ),
  rainbow: (
    col-1: v.$orange,
    col-2: v.$blue,
    col-3: v.$orange,
    col-4: v.$red,
    col-5: v.$pink,
    cell-background-color: v.$ghost-white,
    main-color: v.$main-color, 
    card-border-style: 4px solid v.$grey,
    card-background-border-style: 4px solid v.$main-color,
    font-family: Georgia,
    title-font-size: 3rem,
    content-font-size: v.$default-font-size,
    font-color: v.$dark-purple,
  )
);

// functions
@function get-col-num($n){
  @return ($n - 1) % v.$col-num + 1;
}


//mixins

// itteratively adds border radius to 4 corners of card
@mixin round-edges(){

  $cell-seq: 1 v.$col-num (v.$cell-num - v.$col-num + 1) (v.$cell-num);
  $border-seq: (v.$card-border-radius 0 0 0, 0 v.$card-border-radius 0 0, 0 0 0 v.$card-border-radius, 0 0 v.$card-border-radius 0 );
 
  @for $i from 1 through 4 {
    .col:has(#cell-#{list.nth($cell-seq, $i)}) * {
      border-radius: list.nth($border-seq, $i)
    }
  }

  // round inner card content
  .row:nth-child(2) > .col:first-child *{
    border-top-left-radius: v.$card-border-radius;
  }
  .row:nth-child(2) > .col:last-child *{
    border-top-right-radius: v.$card-border-radius;
  }
}

//color mixins

@mixin apply-card-border-style($theme-map){
  @include round-edges();

  $card-border-style: map.get($theme-map,card-border-style);
  $card-background-border-style: map.get($theme-map,card-background-border-style);
  $cell-num: v.$row-num * v.$col-num;

  .card-container {
    border: $card-background-border-style;
    border-radius: 10%;
  }
  .content-cell{
    border: $card-border-style;
  }

}


@mixin apply-background-color($theme-map){

    // give each column a different color
    @for $i from 1 through (v.$col-num * v.$row-num) {
      
      @if $i <= v.$col-num {
        
         // card title row color
        #cell-#{$i} {
          background-color: black 0%;
        }
      } @else {
        // body content col color
      #cell-#{$i} {
        background-color: map.get($theme-map,col-#{get-col-num($i)});
      }
    }
    .card-container{
      background-color: map.get($theme-map,main-color);
    }

  }
}


@mixin apply-font-style($theme-map){
  $font-family: map.get($theme-map,font-family);
  $default-font-size: map.get($theme-map,default-font-size);
  $title-font-size: map.get($theme-map,title-font-size);
  $font-color: map.get($theme-map,font-color);

  .card-container * {
    color: $font-color;
  }

  .col > * {
    font-family: $font-family;
    text-align: center;
  }
  .title-cell {
    font-size: $title-font-size;
  }
  .content-cell {
    font-size: $default-font-size;
  }

}


@mixin apply-theme($theme-name) {

  @if map.has-key($themes, $theme-name) {
      $theme-map: map.get($themes, $theme-name);

      @include apply-card-border-style($theme-map);
      @include apply-background-color($theme-map);
      @include apply-font-style($theme-map);
    }
  
}

